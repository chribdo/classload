name: Build Cross-Platform Apps

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Generate hilfe.html
        run: python export_readme_html.py

      - name: Build EXE
        run: |
          pyinstaller --noconfirm --onefile --windowed --add-data "LICENSE.txt;." --add-data "README.md;." --add-data "screenshot.png;." --add-data "hilfe.html;." --add-data "assets;assets" --name "Classload" --icon=assets/icon.ico tk_main_menue.py
      - name: Upload Windows EXE
        uses: actions/upload-artifact@v4
        with:
          name: Classload-EXE
          path: dist/*.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install py2app

      - name: Clean previous builds
        run: |
          rm -rf build dist *.spec

      - name: Generate hilfe.html
        run: python export_readme_html.py

      - name: Build macOS .app with py2app
        run: |
          python setup.py py2app

      - name: Create ZIP archive of .app
        run: |
          cd dist
          zip -r Classload-mac.zip Classload.app

      - name: Upload .app ZIP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Classload-mac
          path: dist/Classload-mac.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Generate hilfe.html
        run: python export_readme_html.py

      - name: Build Executable
        run: |
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "LICENSE.txt:." \
            --add-data "README.md:." \
            --add-data "screenshot.png:." \
            --add-data "assets:assets" \
            --add-data "hilfe.html:." \
            --name "Classload" \
            --icon=assets/icon.ico \
            tk_main_menue.py

      - name: Pack Executable as tar.gz
        run: |
          mkdir -p release
          cp dist/Classload release/
          tar -czf Classload-linux.tar.gz -C release Classload

      - name: Upload Linux Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Classload-linux
          path: Classload-linux.tar.gz

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install pdoc
          pip install -r requirements.txt

      - name: Generate hilfe.html
        run: python export_readme_html.py

      - name: Generate documentation
        run: |
          export PYTHONPATH=.
          python generate_docs.py

      - name: Create docs/ directory if missing
        run: mkdir -p docs

      - name: Copy hilfe.html to docs (after docs generation)
        run: |
          if [ ! -f hilfe.html ]; then
            echo "‚ùå hilfe.html wurde NICHT erzeugt!"
            ls -al
            exit 1
          fi
          echo "‚úÖ hilfe.html gefunden ‚Äì wird jetzt kopiert"
          cp hilfe.html docs/hilfe.html

      - name: Add custom landing page
        run: cp .github/pages/index.html docs/index.html

      - name: List contents of docs
        run: |
          echo "üìÅ Inhalt von docs/:"
          ls -al docs/
          echo
          echo "üîé Vorschau auf docs/hilfe.html:"
          head -n 20 docs/hilfe.html || echo "‚ùå nicht lesbar"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true







