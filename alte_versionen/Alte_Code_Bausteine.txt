from tk_jamf_login import JamfLogin
from tkinter import messagebox, scrolledtext
from datetime import timedelta
import ttkbootstrap as ttk
from ttkbootstrap.dialogs import *
from ttkbootstrap.dialogs import Messagebox
from ttkbootstrap.scrolled import ScrolledText
from jamfscripts import *
import os, sys
import platform
from platformdirs import user_data_dir
import tempfile
import tkinter as tk
import base64
from pathlib import Path
import subprocess
import webbrowser


  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Generate hilfe.html
        run: python export_readme_html.py

      - name: Build Executable
        run: |
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "LICENSE.txt:." \
            --add-data "README.md:." \
            --add-data "screenshot.png:." \
            --add-data "assets:assets" \
            --add-data "hilfe.html:." \
            --name "Classload" \
            --icon=assets/icon.ico \
            tk_main_menue.py

      - name: Upload Linux Executable
        uses: actions/upload-artifact@v4
        with:
          name: Classload-linux
          path: dist/Classload



# import base64
# import os
# from platformdirs import user_data_dir


def show_help():
    viewer_script = Path(__file__).parent / "markdown_viewer_standalone.py"
    readme = Path(get_resource_path("README.md")).resolve()
    subprocess.Popen([sys.executable, str(viewer_script), str(readme)])

"""
def show_markdown_window(root, title, html_content):
   #zeigt ein Fenster mit einer HTMl-Datei an. Urspr√ºnglich war die HTNL mal .md, daher der Name
    #window = ttk.Toplevel(root, iconphoto=None)
    if sys.platform == "darwin":
      window = ttk.Toplevel(root)
    else:
       window = ttk.Toplevel(root, iconphoto=None)
    #set_window_icon(window)
    window.title(title)
    window.geometry("600x400")
    html_label = HTMLLabel(window, html=html_content)
    html_label.pack(fill="both", expand=True, padx=10, pady=10)
"""

def load_markdown_file(filename):
    """L√§dt eine Markdown-Datei und gibt den reinen Text zur√ºck."""
    if not os.path.exists(filename):
        return f"Datei '{filename}' nicht gefunden."
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

def image_to_data_url(path):
    """Liest ein Bild ein und wandelt es in eine data:-URL um (Base64)."""
    image_path = Path(path)
    if not image_path.exists():
        return None
    mime = "image/png"  # Falls n√∂tig: "image/jpeg"
    b64 = base64.b64encode(image_path.read_bytes()).decode()
    return f"data:{mime};base64,{b64}"


"""
def show_markdown_window(root, title, html_content):
   #zeigt ein Fenster mit einer HTMl-Datei an. Urspr√ºnglich war die HTNL mal .md, daher der Name
    #window = ttk.Toplevel(root, iconphoto=None)
    if sys.platform == "darwin":
      window = ttk.Toplevel(root)
    else:
       window = ttk.Toplevel(root, iconphoto=None)
    #set_window_icon(window)
    window.title(title)
    window.geometry("600x400")
    html_label = HTMLLabel(window, html=html_content)
    html_label.pack(fill="both", expand=True, padx=10, pady=10)
"""

def load_markdown_file(filename):
    """L√§dt eine Markdown-Datei und gibt den reinen Text zur√ºck."""
    if not os.path.exists(filename):
        return f"Datei '{filename}' nicht gefunden."
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

def image_to_data_url(path):
    """Liest ein Bild ein und wandelt es in eine data:-URL um (Base64)."""
    image_path = Path(path)
    if not image_path.exists():
        return None
    mime = "image/png"  # Falls n√∂tig: "image/jpeg"
    b64 = base64.b64encode(image_path.read_bytes()).decode()
    return f"data:{mime};base64,{b64}"

def show_help():
    viewer_script = Path(__file__).parent / "markdown_viewer_standalone.py"
    readme = Path(get_resource_path("README.md")).resolve()
    subprocess.Popen([sys.executable, str(viewer_script), str(readme)])



<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Classload ‚Äì Projekt√ºbersicht</title>
  <link rel="icon" href="icon.png" />
  <style>
    body {
      font-family: sans-serif;
      max-width: 900px;
      margin: 2rem auto;
      padding: 1rem;
      background-color: #ffffff;
      color: #1e3555;
      line-height: 1.6;
    }
    header {
      display: flex;
      align-items: center;
      gap: 1rem;
      margin-bottom: 2rem;
    }
    header img {
      width: 48px;
      height: 48px;
      border-radius: 8px;
    }
    header h1 {
      margin: 0;
      font-size: 2rem;
    }
    .button {
      display: inline-block;
      margin: 0.5rem 0.5rem 1rem 0;
      padding: 0.6rem 1rem;
      background-color: #324c7b;
      color: white;
      text-decoration: none;
      border-radius: 6px;
    }
    a {
      color: #1e3555;
    }
    iframe {
      width: 100%;
      height: 600px;
      border: 1px solid #aaa;
      margin-top: 2rem;
      background: white;
    }
  </style>
</head>
<body>
  <header>
    <img src="icon.png" alt="Classload-Logo" />
    <h1>Classload</h1>
  </header>

  <p><strong>Classload</strong> hilft bei der Verwaltung von Mobilger√§ten, Benutzern, Benutzergruppen und vor allem Klassen mit JAMF. Wenn iServ und Webuntis bereits miteinander Daten austauschen, kann Classroom zu jeder Unterrichtsgruppe eine Classroom-Klasse erstellen.
  </p>

  <h2>üìÑ Lizenz</h2>
  <p>Die Nutzung ist ausschlie√ülich f√ºr den privaten und schulischen Bereich gestattet. Die kommerzielle Nutzung oder die Nutzung durch Schultr√§ger ist nur im Rahmen einer Testversion erlaubt. Genaueres ist in der Datei <a href="https://github.com/chribdo/classload/blob/main/LICENSE.txt">LICENSE.txt</a> geregelt.</p>

  <h2>‚¨áÔ∏è Downloads</h2>
  <ul>
    <li><a class="button" href="https://github.com/chribdo/classload/releases/latest/download/classload-0.9.0-win64.exe">üíª Windows (.exe)</a></li>
    <li><a class="button" href="https://github.com/chribdo/classload/releases/latest/download/classload-0.9.0-macOS.app.zip">üçé macOS (.dmg)</a></li>
    <li><a class="button" href="https://github.com/chribdo/classload/releases/latest/download/classload-0.9.0-linux.tar">üêß Linux (.tar.gz)</a></li>
  </ul>
  <p>Die Linux-Version ist nicht getestet.</p>

  <h2>üßë‚Äçüíª Kontakt</h2>
  <p>Classload wurde entwickelt von Dr. Christiane Borchel, Lehrerin am Reinoldus- und Schiller-Gymnasium in Dortmund. Kontakt: classload[at]gmx-topmail.de.</p>

  <h2>üóÇÔ∏è Github Repository</h2>
  <p>Der Quellcode ist auf <a href="https://github.com/chribdo/classload" target="_blank" rel="noopener noreferrer">Github</a> einsehbar.</p>

  <h2>üìÑ Projektbeschreibung / Hilfe</h2>
  <iframe src="hilfe.html"></iframe>
</body>
</html>
