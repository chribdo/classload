from tk_jamf_login import JamfLogin
from tkinter import messagebox, scrolledtext
from datetime import timedelta
import ttkbootstrap as ttk
from ttkbootstrap.dialogs import *
from ttkbootstrap.dialogs import Messagebox
from ttkbootstrap.scrolled import ScrolledText
from jamfscripts import *
import os, sys
import platform
from platformdirs import user_data_dir
import tempfile
import tkinter as tk
import base64
from pathlib import Path
import subprocess
import webbrowser


  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Generate hilfe.html
        run: python export_readme_html.py

      - name: Build Executable
        run: |
          pyinstaller --noconfirm --onefile --windowed \
            --add-data "LICENSE.txt:." \
            --add-data "README.md:." \
            --add-data "screenshot.png:." \
            --add-data "assets:assets" \
            --add-data "hilfe.html:." \
            --name "Classload" \
            --icon=assets/icon.ico \
            tk_main_menue.py

      - name: Upload Linux Executable
        uses: actions/upload-artifact@v4
        with:
          name: Classload-linux
          path: dist/Classload



# import base64
# import os
# from platformdirs import user_data_dir


def show_help():
    viewer_script = Path(__file__).parent / "markdown_viewer_standalone.py"
    readme = Path(get_resource_path("README.md")).resolve()
    subprocess.Popen([sys.executable, str(viewer_script), str(readme)])

"""
def show_markdown_window(root, title, html_content):
   #zeigt ein Fenster mit einer HTMl-Datei an. Ursprünglich war die HTNL mal .md, daher der Name
    #window = ttk.Toplevel(root, iconphoto=None)
    if sys.platform == "darwin":
      window = ttk.Toplevel(root)
    else:
       window = ttk.Toplevel(root, iconphoto=None)
    #set_window_icon(window)
    window.title(title)
    window.geometry("600x400")
    html_label = HTMLLabel(window, html=html_content)
    html_label.pack(fill="both", expand=True, padx=10, pady=10)
"""

def load_markdown_file(filename):
    """Lädt eine Markdown-Datei und gibt den reinen Text zurück."""
    if not os.path.exists(filename):
        return f"Datei '{filename}' nicht gefunden."
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

def image_to_data_url(path):
    """Liest ein Bild ein und wandelt es in eine data:-URL um (Base64)."""
    image_path = Path(path)
    if not image_path.exists():
        return None
    mime = "image/png"  # Falls nötig: "image/jpeg"
    b64 = base64.b64encode(image_path.read_bytes()).decode()
    return f"data:{mime};base64,{b64}"


"""
def show_markdown_window(root, title, html_content):
   #zeigt ein Fenster mit einer HTMl-Datei an. Ursprünglich war die HTNL mal .md, daher der Name
    #window = ttk.Toplevel(root, iconphoto=None)
    if sys.platform == "darwin":
      window = ttk.Toplevel(root)
    else:
       window = ttk.Toplevel(root, iconphoto=None)
    #set_window_icon(window)
    window.title(title)
    window.geometry("600x400")
    html_label = HTMLLabel(window, html=html_content)
    html_label.pack(fill="both", expand=True, padx=10, pady=10)
"""

def load_markdown_file(filename):
    """Lädt eine Markdown-Datei und gibt den reinen Text zurück."""
    if not os.path.exists(filename):
        return f"Datei '{filename}' nicht gefunden."
    with open(filename, "r", encoding="utf-8") as f:
        return f.read()

def image_to_data_url(path):
    """Liest ein Bild ein und wandelt es in eine data:-URL um (Base64)."""
    image_path = Path(path)
    if not image_path.exists():
        return None
    mime = "image/png"  # Falls nötig: "image/jpeg"
    b64 = base64.b64encode(image_path.read_bytes()).decode()
    return f"data:{mime};base64,{b64}"

def show_help():
    viewer_script = Path(__file__).parent / "markdown_viewer_standalone.py"
    readme = Path(get_resource_path("README.md")).resolve()
    subprocess.Popen([sys.executable, str(viewer_script), str(readme)])